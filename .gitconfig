[include]
        # Local/private config goes in the include
        path = ~/.gitconfig.local
[init]
        defaultBranch = main
[core]
        excludesfile = ~/.gitignore
        autocrlf = false
        # Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
        trustctime = false
[credential]
        helper = cache --timeout=604800
[format]
        pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[pull]
        rebase = true
[push]
        # 'git push' will push the current branch to its tracking branch
        # the usual default is to push all branches
        default = upstream
        autoSetupRemote = true
[branch]
        autosetupmerge = true
[rebase]
        autoSquash = true
	autoStash = true
[apply]
        whitespace = nowarn
[merge]
        summary = true
[hub]
        host = github.com
        protocol = https
[alias]
        # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
        snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
        snapshots = !git stash list --grep snapshot
        #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
        recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

        # shortcuts... 

        # add
        a = add# add
        chunkyadd = add --patch# stage commits chunk by chunk
        #
        co = checkout
        unstage = reset HEAD
        # pull & push
        pl = up --prune# pull
        ps = push origin HEAD# push
        # branch
        b = branch -v# branch (verbose)
        # create and switch to a new branch (mnemonic: "git new branch branchname...")
        nb = checkout -b
        # commit
        c = commit -m# commit with message
        ca = commit -am# commit all with message
        ci = commit# commit
        amend = commit --amend# ammend your last commit
        ammend = amend# ammend your last commit
        # status
        s = status --short
        st = status
        stat = status
        # commit
        ci = commit
        civ = commit -v
        cim = commit -m
        cia = commit -a -m
        # diff
        df = diff
        dfc = diff --cached
        dfs = diff --staged# Saner UX of the prior...
        vdiff = !git diff | view -
        last = diff HEAD^

        # log
        ll = log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
        l = log --graph --date=short
        lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
        changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
        short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
        simple = log --pretty=format:\" * %s\"
        shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
        recent = log --relative --abbrev-commit --date=local --pretty=format:'%C(white)%h %C(cyan)%cr %C(green)by %cn %Creset%n%C(yellow)%cd%n%s' --stat -5
        count = !git shortlog -sn
        who = shortlog -s --

        # ls      
        ls = ls-files
        ignored = !git ls-files -v | grep \"^[[:lower:]]\"
        ls-ignored = ls-files --others --ignored --exclude-standard
        info = remote show origin
        remotes = remote -v
        tags = tag -l -n

        # rebase
        rc = rebase --continue# continue rebase
        ra = rebase --abort# abort rebase
        rs = rebase --skip# skip rebase

        # remote
        r = remote -v# show remotes (verbose)

        # reset
        unstage = reset HEAD# remove files from index (tracking)
        uncommit = reset --soft HEAD^# go back before last commit, with files in uncommitted state
        filelog = log -u# show changes to a file
        mt = mergetool# fire up the merge tool

        # stash
        ss = stash# stash changes
        sl = stash list# list stashes
        sa = stash apply# apply stash (restore changes)
        sd = stash drop# drop stashes (destory changes)

        # status
        s = status# status
        st = status# status
        stat = status# status

        # tag
        t = tag -n -l# show tags with <n> lines of each tag message
[color]
        diff = auto
        status = auto
        branch = auto
        ui = true
[diff]
        tool = nvimdiff
        # tool = meld
        # prompt = true
        # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
        # instead of a/b/c/d as prefixes for patches
        # mnemonicprefix = true
        # algorithm = patience
[difftool]
        cmd = "nvim -d \"$LOCAL\" \"$REMOTE\""
        prompt = false
# [difftool "vscode"]
# 	cmd = code --wait --diff $LOCAL $REMOTE
[difftool "meld"]
        cmd = meld "$LOCAL" "$REMOTE"
[difftool "nvimdiff"]
        cmd = "nvim -d \"$LOCAL\" \"$REMOTE\""
[interactive]
	diffFilter = delta --color-only --features=interactive
[pager]
        diff = delta
        log = delta
        reflog = delta
        show = delta
[delta]
        plus-style = "syntax #012800"
        minus-style = "syntax #340001"
        syntax-theme = Monokai Extended
        navigate = true
        features = decorations
[delta "interactive"]
	keep-plus-minus-markers = false
[delta "decorations"]
	hunk-header-style = omit
	line-numbers = true
	syntax-theme = base16
[help]
        autocorrect = 1
